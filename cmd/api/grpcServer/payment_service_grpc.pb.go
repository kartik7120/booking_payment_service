// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: payment_service.proto

package payment_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentService_CreateCheckOutSession_FullMethodName = "/moviedb_service.PaymentService/CreateCheckOutSession"
	PaymentService_CreatePaymentLink_FullMethodName     = "/moviedb_service.PaymentService/CreatePaymentLink"
	PaymentService_IsValidIdempotentKey_FullMethodName  = "/moviedb_service.PaymentService/IsValidIdempotentKey"
	PaymentService_CommitIdempotentKey_FullMethodName   = "/moviedb_service.PaymentService/CommitIdempotentKey"
	PaymentService_CreateOrder_FullMethodName           = "/moviedb_service.PaymentService/CreateOrder"
	PaymentService_CommitCustomerID_FullMethodName      = "/moviedb_service.PaymentService/CommitCustomerID"
	PaymentService_CommitOrderIds_FullMethodName        = "/moviedb_service.PaymentService/CommitOrderIds"
	PaymentService_CreateCustomer_FullMethodName        = "/moviedb_service.PaymentService/CreateCustomer"
	PaymentService_GeneratePaymentLink_FullMethodName   = "/moviedb_service.PaymentService/GeneratePaymentLink"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	CreateCheckOutSession(ctx context.Context, in *CreateCheckoutSessionRequest, opts ...grpc.CallOption) (*CreateCheckoutSessionResponse, error)
	CreatePaymentLink(ctx context.Context, in *Create_Payment_Intent_INR_Request, opts ...grpc.CallOption) (*Create_Payment_Intent_INR_Response, error)
	IsValidIdempotentKey(ctx context.Context, in *IsValidIdempotentKeyRequest, opts ...grpc.CallOption) (*IsValidIdempotentKeyResponse, error)
	CommitIdempotentKey(ctx context.Context, in *CommitIdempotentKeyRequest, opts ...grpc.CallOption) (*Create_Payment_Intent_INR_Response, error)
	CreateOrder(ctx context.Context, in *Create_Order_Request, opts ...grpc.CallOption) (*Create_Order_Response, error)
	CommitCustomerID(ctx context.Context, in *CommitIdempotentKeyRequest, opts ...grpc.CallOption) (*Create_Payment_Intent_INR_Response, error)
	CommitOrderIds(ctx context.Context, in *CommitIdempotentKeyRequest, opts ...grpc.CallOption) (*Create_Payment_Intent_INR_Response, error)
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error)
	GeneratePaymentLink(ctx context.Context, in *CreatePaymentLinkRequest, opts ...grpc.CallOption) (*CreatePaymentLinkResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) CreateCheckOutSession(ctx context.Context, in *CreateCheckoutSessionRequest, opts ...grpc.CallOption) (*CreateCheckoutSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCheckoutSessionResponse)
	err := c.cc.Invoke(ctx, PaymentService_CreateCheckOutSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreatePaymentLink(ctx context.Context, in *Create_Payment_Intent_INR_Request, opts ...grpc.CallOption) (*Create_Payment_Intent_INR_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Create_Payment_Intent_INR_Response)
	err := c.cc.Invoke(ctx, PaymentService_CreatePaymentLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) IsValidIdempotentKey(ctx context.Context, in *IsValidIdempotentKeyRequest, opts ...grpc.CallOption) (*IsValidIdempotentKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsValidIdempotentKeyResponse)
	err := c.cc.Invoke(ctx, PaymentService_IsValidIdempotentKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CommitIdempotentKey(ctx context.Context, in *CommitIdempotentKeyRequest, opts ...grpc.CallOption) (*Create_Payment_Intent_INR_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Create_Payment_Intent_INR_Response)
	err := c.cc.Invoke(ctx, PaymentService_CommitIdempotentKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreateOrder(ctx context.Context, in *Create_Order_Request, opts ...grpc.CallOption) (*Create_Order_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Create_Order_Response)
	err := c.cc.Invoke(ctx, PaymentService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CommitCustomerID(ctx context.Context, in *CommitIdempotentKeyRequest, opts ...grpc.CallOption) (*Create_Payment_Intent_INR_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Create_Payment_Intent_INR_Response)
	err := c.cc.Invoke(ctx, PaymentService_CommitCustomerID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CommitOrderIds(ctx context.Context, in *CommitIdempotentKeyRequest, opts ...grpc.CallOption) (*Create_Payment_Intent_INR_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Create_Payment_Intent_INR_Response)
	err := c.cc.Invoke(ctx, PaymentService_CommitOrderIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCustomerResponse)
	err := c.cc.Invoke(ctx, PaymentService_CreateCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GeneratePaymentLink(ctx context.Context, in *CreatePaymentLinkRequest, opts ...grpc.CallOption) (*CreatePaymentLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentLinkResponse)
	err := c.cc.Invoke(ctx, PaymentService_GeneratePaymentLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility.
type PaymentServiceServer interface {
	CreateCheckOutSession(context.Context, *CreateCheckoutSessionRequest) (*CreateCheckoutSessionResponse, error)
	CreatePaymentLink(context.Context, *Create_Payment_Intent_INR_Request) (*Create_Payment_Intent_INR_Response, error)
	IsValidIdempotentKey(context.Context, *IsValidIdempotentKeyRequest) (*IsValidIdempotentKeyResponse, error)
	CommitIdempotentKey(context.Context, *CommitIdempotentKeyRequest) (*Create_Payment_Intent_INR_Response, error)
	CreateOrder(context.Context, *Create_Order_Request) (*Create_Order_Response, error)
	CommitCustomerID(context.Context, *CommitIdempotentKeyRequest) (*Create_Payment_Intent_INR_Response, error)
	CommitOrderIds(context.Context, *CommitIdempotentKeyRequest) (*Create_Payment_Intent_INR_Response, error)
	CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error)
	GeneratePaymentLink(context.Context, *CreatePaymentLinkRequest) (*CreatePaymentLinkResponse, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServiceServer struct{}

func (UnimplementedPaymentServiceServer) CreateCheckOutSession(context.Context, *CreateCheckoutSessionRequest) (*CreateCheckoutSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCheckOutSession not implemented")
}
func (UnimplementedPaymentServiceServer) CreatePaymentLink(context.Context, *Create_Payment_Intent_INR_Request) (*Create_Payment_Intent_INR_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentLink not implemented")
}
func (UnimplementedPaymentServiceServer) IsValidIdempotentKey(context.Context, *IsValidIdempotentKeyRequest) (*IsValidIdempotentKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsValidIdempotentKey not implemented")
}
func (UnimplementedPaymentServiceServer) CommitIdempotentKey(context.Context, *CommitIdempotentKeyRequest) (*Create_Payment_Intent_INR_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitIdempotentKey not implemented")
}
func (UnimplementedPaymentServiceServer) CreateOrder(context.Context, *Create_Order_Request) (*Create_Order_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedPaymentServiceServer) CommitCustomerID(context.Context, *CommitIdempotentKeyRequest) (*Create_Payment_Intent_INR_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitCustomerID not implemented")
}
func (UnimplementedPaymentServiceServer) CommitOrderIds(context.Context, *CommitIdempotentKeyRequest) (*Create_Payment_Intent_INR_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitOrderIds not implemented")
}
func (UnimplementedPaymentServiceServer) CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedPaymentServiceServer) GeneratePaymentLink(context.Context, *CreatePaymentLinkRequest) (*CreatePaymentLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePaymentLink not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}
func (UnimplementedPaymentServiceServer) testEmbeddedByValue()                        {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_CreateCheckOutSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCheckoutSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreateCheckOutSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreateCheckOutSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreateCheckOutSession(ctx, req.(*CreateCheckoutSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreatePaymentLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Create_Payment_Intent_INR_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreatePaymentLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreatePaymentLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreatePaymentLink(ctx, req.(*Create_Payment_Intent_INR_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_IsValidIdempotentKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsValidIdempotentKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).IsValidIdempotentKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_IsValidIdempotentKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).IsValidIdempotentKey(ctx, req.(*IsValidIdempotentKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CommitIdempotentKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitIdempotentKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CommitIdempotentKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CommitIdempotentKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CommitIdempotentKey(ctx, req.(*CommitIdempotentKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Create_Order_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreateOrder(ctx, req.(*Create_Order_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CommitCustomerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitIdempotentKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CommitCustomerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CommitCustomerID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CommitCustomerID(ctx, req.(*CommitIdempotentKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CommitOrderIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitIdempotentKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CommitOrderIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CommitOrderIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CommitOrderIds(ctx, req.(*CommitIdempotentKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreateCustomer(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GeneratePaymentLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GeneratePaymentLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GeneratePaymentLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GeneratePaymentLink(ctx, req.(*CreatePaymentLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moviedb_service.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCheckOutSession",
			Handler:    _PaymentService_CreateCheckOutSession_Handler,
		},
		{
			MethodName: "CreatePaymentLink",
			Handler:    _PaymentService_CreatePaymentLink_Handler,
		},
		{
			MethodName: "IsValidIdempotentKey",
			Handler:    _PaymentService_IsValidIdempotentKey_Handler,
		},
		{
			MethodName: "CommitIdempotentKey",
			Handler:    _PaymentService_CommitIdempotentKey_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _PaymentService_CreateOrder_Handler,
		},
		{
			MethodName: "CommitCustomerID",
			Handler:    _PaymentService_CommitCustomerID_Handler,
		},
		{
			MethodName: "CommitOrderIds",
			Handler:    _PaymentService_CommitOrderIds_Handler,
		},
		{
			MethodName: "CreateCustomer",
			Handler:    _PaymentService_CreateCustomer_Handler,
		},
		{
			MethodName: "GeneratePaymentLink",
			Handler:    _PaymentService_GeneratePaymentLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment_service.proto",
}
